<?xml version="1.0" encoding="UTF-8"?>
<project name="psr11_phpcache" default="test" basedir=".">
    <!-- By default, we assume all tools to be on the $PATH -->
    <property name="docker" value="docker"/>
    <property environment="env"/>
    <condition property="image" value="${env.DOCKER_IMAGE}" else="psr11_phpcache">
        <isset property="env.DOCKER_IMAGE"/>
    </condition>

    <target name="build"
            depends="build-php"
            description="Shortcut for build-php"/>

    <target name="build-php"
            unless="build.php.done"
            description="Build the PHP docker container">
        <exec executable="docker" taskname="build-php">
            <arg value="build" />
            <arg path="${basedir}" />
            <arg value="-f" />
            <arg value="${basedir}/Dockerfile" />
            <arg value="-t" />
            <arg value="${image}" />
        </exec>

        <property name="build.php.done" value="true"/>
    </target>

    <target name="project" depends="build-php" unless="composer-require.done" description="Composer require">
        <exec executable="docker" taskname="composer-require">
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-v" />
            <arg value="${basedir}:/var/www" />
            <arg value="-e" />
            <arg value="COMPOSER_ALLOW_SUPERUSER=1" />
            <arg value="${image}" />
            <arg line="composer create-project mezzio/mezzio-skeleton test" />
        </exec>
        <property name="composer-require.done" value="true"/>
        <property name="plugin" value=""/>
    </target>

    <target name="composer-install" depends="build-php" unless="composer-install.done" description="Composer install">
        <exec executable="docker" taskname="composer-install">
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-v" />
            <arg value="${basedir}:/var/www" />
            <arg value="-e" />
            <arg value="COMPOSER_ALLOW_SUPERUSER=1" />
            <arg value="${image}" />
            <arg line="composer install" />
        </exec>
        <property name="composer-install.done" value="true"/>
    </target>

    <target name="composer-require" depends="build-php" unless="composer-require.done" description="Composer require">
        <exec executable="docker" taskname="composer-require">
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-v" />
            <arg value="${basedir}:/var/www" />
            <arg value="-e" />
            <arg value="COMPOSER_ALLOW_SUPERUSER=1" />
            <arg value="${image}" />
            <arg line="composer require ${plugin}" />
        </exec>
        <property name="composer-require.done" value="true"/>
        <property name="plugin" value=""/>
    </target>

    <target name="composer-require-dev" depends="build-php" unless="composer-require-dev.done" description="Composer require dev">
        <exec executable="docker" taskname="composer-require">
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-v" />
            <arg value="${basedir}:/var/www" />
            <arg value="-e" />
            <arg value="COMPOSER_ALLOW_SUPERUSER=1" />
            <arg value="${image}" />
            <arg line="composer require --dev ${plugin}" />
        </exec>
        <property name="composer-require-dev.done" value="true"/>
        <property name="plugin" value=""/>
    </target>

    <target name="composer-update" depends="build-php" unless="composer-update.done" description="Composer update">
        <exec executable="docker" taskname="composer-update">
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-v" />
            <arg value="${basedir}:/var/www" />
            <arg value="-e" />
            <arg value="COMPOSER_ALLOW_SUPERUSER=1" />
            <arg value="${image}" />
            <arg line="composer update" />
        </exec>
        <property name="composer-update.done" value="true"/>
    </target>
    <!-- For running test -->

    <target name="test"
            depends="prepare,lint,phpmd,phpcs,phpcpd,phpunit,clean"
            description="Run all tests with no reporting"/>

    <target name="test-ci"
            depends="prepare,clean,lint-ci,phpmd-ci,phpcs-ci,phpcpd-ci,pdepend,phpunit-with-coverage,clean"
            description="Run all tests with reporting"/>

    <target name="lint" depends="build-php" unless="lint.done"
            description="Perform syntax check">
        <exec executable="docker" failonerror="true" taskname="lint">
            <arg value="run"/>
            <arg value="--rm"/>
            <arg value="${image}"/>
            <arg line="sh -c"/>
            <arg value="find /var/www ! -path '/var/www/vendor/*' -name '*.php' | while read f; do php -l &quot;$f&quot; || exit $?; done;"/>
        </exec>
        <property name="lint.done" value="true"/>
    </target>

    <target name="lint-ci" unless="lint.done"
            description="Perform syntax check">
        <exec executable="docker" failonerror="true" taskname="lint-ci">
            <arg value="run"/>
            <arg value="--rm"/>
            <arg value="${image}"/>
            <arg line="sh -c"/>
            <arg value="find /var/www ! -path '/var/www/vendor/*' -name '*.php' | while read f; do php -l &quot;$f&quot; || exit $?; done;"/>
        </exec>
        <property name="lint.done" value="true"/>
    </target>

    <target name="pdepend" unless="pdepend.done"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="docker" failonerror="true" taskname="pdepend">
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-v" />
            <arg value="${basedir}:/var/www" />
            <arg value="-w" />
            <arg value="/var/www" />
            <arg value="${image}" />
            <arg value="pdepend" />
            <arg value="--jdepend-xml=/var/www/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=/var/www/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=/var/www/build/pdepend/overview-pyramid.svg" />
            <arg value="--ignore=/vendor/,/tests/"/>
            <arg value="/var/www" />
        </exec>
        <property name="pdepend.done" value="true"/>
    </target>

    <target name="phpmd" unless="phpmd.done" depends="build-php"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="docker" failonerror="true" taskname="phpmd" >
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-w" />
            <arg value="/var/www" />
            <arg value="${image}" />
            <arg value="phpmd" />
            <arg value="/var/www" />
            <arg value="text" />
            <arg value="/var/www/phpmd.xml" />
            <arg value="--exclude" />
            <arg value="*/vendor/*,*/data/*" />
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpmd-ci" unless="phpmd.done" depends="prepare"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="docker" failonerror="true" taskname="phpmd-ci" >
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-v" />
            <arg value="${basedir}:/var/www" />
            <arg value="-w" />
            <arg value="/var/www" />
            <arg value="${image}" />
            <arg value="phpmd" />
            <arg value="/var/www" />
            <arg value="xml" />
            <arg value="/var/www/phpmd.xml" />
            <arg value="/var/www/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="/var/www/build/logs/pmd.xml" />
            <arg value="--exclude" />
            <arg value="*/vendor/*,*/data/*" />
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpcs" unless="phpcs.done" depends="build-php"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="docker" failonerror="true" taskname="phpcs" >
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-w" />
            <arg value="/var/www" />
            <arg value="${image}" />
            <arg value="phpcs" />
            <arg value="--standard=PSR12" />
            <arg value="--extensions=php" />
            <arg value="--ignore=vendor/*,data/*" />
            <arg value="/var/www" />
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcs-ci" unless="phpcs.done" depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="docker" failonerror="true" taskname="phpcs-ci" >
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-v" />
            <arg value="${basedir}:/var/www" />
            <arg value="-w" />
            <arg value="/var/www" />
            <arg value="${image}" />
            <arg value="phpcs" />
            <arg value="--report=checkstyle" />
            <arg value="--report-file=/var/www/build/logs/checkstyle.xml" />
            <arg value="--standard=PSR12" />
            <arg value="--extensions=php" />
            <arg value="--ignore=vendor/*,data/*" />
            <arg value="/var/www" />
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcpd" unless="phpcpd.done" depends="build-php"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="docker" failonerror="true" taskname="phpcpd" >
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-w" />
            <arg value="/var/www" />
            <arg value="${image}" />
            <arg value="phpcpd" />
            <arg value="--exclude=vendor" />
            <arg value="--exclude=tests" />
            <arg value="--exclude=data" />
            <arg value="/var/www" />
        </exec>
        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpcpd-ci" unless="phpcpd.done" depends="prepare"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="docker" failonerror="true" taskname="phpcpd-ci" >
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-v" />
            <arg value="${basedir}:/var/www" />
            <arg value="-w" />
            <arg value="/var/www" />
            <arg value="${image}" />
            <arg value="phpcpd" />
            <arg value="--log-pmd" />
            <arg value="/var/www/build/logs/pmd-cpd.xml" />
            <arg value="--exclude=vendor" />
            <arg value="--exclude=tests" />
            <arg value="--exclude=data" />
            <arg value="/var/www" />
        </exec>
        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpunit-with-coverage" unless="phpunit.done" depends="prepare"
            description="Run unit tests with PHPUnit">
        <exec executable="docker" failonerror="true" resultproperty="result.phpunit" taskname="phpunit-with-coverage">
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-v" />
            <arg value="${basedir}:/var/www" />
            <arg value="-w" />
            <arg value="/var/www" />
            <arg value="${image}" />
            <arg line="sh -c 'docker-php-ext-enable xdebug; phpunit --coverage-text -c /var/www/phpunit.xml --coverage-clover /var/www/build/logs/clover.xml --coverage-crap4j /var/www/build/logs/crap4j.xml --coverage-html /var/www/build/coverage --log-junit /var/www/build/logs/junit.xml'" />
        </exec>
        <property name="phpunit.done" value="true"/>
    </target>

    <target name="phpunit" unless="phpunit.done" depends="build-php"
            description="Run unit tests with PHPUnit (without generating code coverage reports)">
        <exec executable="docker" failonerror="true" taskname="phpunit">
            <arg value="run" />
            <arg value="--rm" />
            <arg value="-w" />
            <arg value="/var/www" />
            <arg value="${image}" />
            <arg line="/var/www/vendor/phpunit/phpunit/phpunit" />
            <arg value="--configuration"/>
            <arg value="/var/www/phpunit.xml"/>
            <arg line="--no-coverage -v"/>
        </exec>
        <property name="phpunit.done" value="true"/>
    </target>

    <target name="clean" unless="clean.done" description="Cleanup build artifacts">
        <delete dir="./build/api"/>
        <delete dir="./build/coverage"/>
        <delete dir="./build/logs"/>
        <delete dir="./build/pdepend"/>
        <delete dir="./build/db"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
        <mkdir dir="./build/api"/>
        <mkdir dir="./build/coverage"/>
        <mkdir dir="./build/logs"/>
        <mkdir dir="./build/pdepend"/>
        <mkdir dir="./build/db"/>
        <property name="prepare.done" value="true"/>
    </target>
</project>
